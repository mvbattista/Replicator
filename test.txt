FILE: 9000-Fina_Corp_M_Client_Group_DisplayType.t
#!/usr/local/bin/perl
#
#
#
use strict;
use warnings; 

use Test::More tests => 6;

our $class;
BEGIN {
    my $base_class = 'Fina::Corp';
    $class = $base_class.'::M::Client::Group::DisplayType';
    use_ok($class);
}

isa_ok($class, 'Rose::DB::Object');

my @columns = qw(
    id
    date_created
    created_by
    last_modified
    modified_by
    name
    display_label
);

my @foreign_keys = qw(
);

my @relationships = qw(
    groups
);

push @relationships, @foreign_keys;

my @methods = qw{
    manage_description
};

can_ok($class, ( @methods ));
is_deeply([$class->meta->column_names], @columns, "Columns Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->foreign_keys}) ], [sort @foreign_keys], "Foreign Keys Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->relationships}) ], [sort @relationships], "Relationships Defined as Expected");



FILE: 9001-Fina_Corp_M_Client_Group_Type.t
#!/usr/local/bin/perl
#
#
#
use strict;
use warnings; 

use Test::More tests => 6;

our $class;
BEGIN {
    my $base_class = 'Fina::Corp';
    $class = $base_class.'::M::Client::Group::Type';
    use_ok($class);
}

isa_ok($class, 'Rose::DB::Object');

my @columns = qw(
    id
    date_created
    created_by
    last_modified
    modified_by
    name
    display_label
);

my @foreign_keys = qw(
);

my @relationships = qw(
    groups
    groups_map
);

push @relationships, @foreign_keys;

my @methods = qw{
    manage_description
};

can_ok($class, ( @methods ));
is_deeply([$class->meta->column_names], @columns, "Columns Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->foreign_keys}) ], [sort @foreign_keys], "Foreign Keys Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->relationships}) ], [sort @relationships], "Relationships Defined as Expected");



FILE: 9002-Fina_Corp_M_Client_Group;.t
#!/usr/local/bin/perl
#
#
#
use strict;
use warnings; 

use Test::More tests => 6;

our $class;
BEGIN {
    my $base_class = 'Fina::Corp';
    $class = $base_class.'::M::Client::Group;';
    use_ok($class);
}

isa_ok($class, 'Rose::DB::Object');

my @columns = qw(
    id
    date_created
    created_by
    last_modified
    modified_by
    client_id
    owner_id
    name
    display_label
    display_image_url
    description
    group_type_id
    value
    group_display_type_id
    start_date
    end_date
);

my @foreign_keys = qw(
    client
    owner
    group_type
    group_display_type
);

my @relationships = qw(
    ancestor_group
    descendant_group
    group_person_map
);

push @relationships, @foreign_keys;

my @methods = qw{
    manage_description
};

can_ok($class, ( @methods ));
is_deeply([$class->meta->column_names], @columns, "Columns Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->foreign_keys}) ], [sort @foreign_keys], "Foreign Keys Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->relationships}) ], [sort @relationships], "Relationships Defined as Expected");



FILE: 9003-Fina_Corp_M_Client_Group_Path.t
#!/usr/local/bin/perl
#
#
#
use strict;
use warnings; 

use Test::More tests => 6;

our $class;
BEGIN {
    my $base_class = 'Fina::Corp';
    $class = $base_class.'::M::Client::Group::Path';
    use_ok($class);
}

isa_ok($class, 'Rose::DB::Object');

my @columns = qw(
    date_created
    created_by
    last_modified
    modified_by
    ancestor_group_id
    descendant_group_id
    depth
);

my @foreign_keys = qw(
    ancestor_group
    descendant_group
);

my @relationships = qw(
);

push @relationships, @foreign_keys;

my @methods = qw{
    manage_description
};

can_ok($class, ( @methods ));
is_deeply([$class->meta->column_names], @columns, "Columns Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->foreign_keys}) ], [sort @foreign_keys], "Foreign Keys Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->relationships}) ], [sort @relationships], "Relationships Defined as Expected");



FILE: 9004-Fina_Corp_M_Client_Group_PersonMap.t
#!/usr/local/bin/perl
#
#
#
use strict;
use warnings; 

use Test::More tests => 6;

our $class;
BEGIN {
    my $base_class = 'Fina::Corp';
    $class = $base_class.'::M::Client::Group::PersonMap';
    use_ok($class);
}

isa_ok($class, 'Rose::DB::Object');

my @columns = qw(
    id
    date_created
    created_by
    last_modified
    modified_by
    client_person_id
    client_group_id
    client_group_type_id
    start_date
    end_date
    explicit
);

my @foreign_keys = qw(
    client_person
    client_group
    client_group_type
);

my @relationships = qw(
);

push @relationships, @foreign_keys;

my @methods = qw{
    manage_description
};

can_ok($class, ( @methods ));
is_deeply([$class->meta->column_names], @columns, "Columns Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->foreign_keys}) ], [sort @foreign_keys], "Foreign Keys Defined as Expected");
is_deeply([ sort (map { $_->name } @{$class->meta->relationships}) ], [sort @relationships], "Relationships Defined as Expected");



